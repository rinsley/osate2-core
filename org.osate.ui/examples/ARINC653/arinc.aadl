package arinc_sample
public

	with ARINC653;

	data dummy
	end dummy;

	thread thr_sensor
		features
			value: out data port dummy;
		properties
			Stack_Size => 200 Bytes;
			Data_Size => 200 Bytes;
			Code_Size => 200 Bytes;
			Period => 10 ms;
	end thr_sensor;

	thread implementation thr_sensor.i
	end thr_sensor.i;

	process pr_data_acq
		features
			sensor1out: out data port dummy;
			sensor2out: out data port dummy;
	end pr_data_acq;

	process implementation pr_data_acq.i
		subcomponents
			sensor1: thread thr_sensor.i;
			sensor2: thread thr_sensor.i;
		connections
			c1: port sensor1.value -> sensor1out;
			c2: port sensor2.value -> sensor2out;
	end pr_data_acq.i;

	thread thr_filter
		features
			sensor1inval: in data port dummy;
			sensor2inval: in data port dummy;
			filteredout: out data port dummy;
		properties
			Stack_Size => 200 Bytes;
			Data_Size => 200 Bytes;
			Code_Size => 200 Bytes;
			Period => 10 ms;
	end thr_filter;

	thread implementation thr_filter.i
	end thr_filter.i;

	thread thr_collector
		features
			filteredin: in data port dummy;
		properties
			Stack_Size => 100 KByte;
			Data_Size => 100 KByte;
			Code_Size => 100 KByte;
			Period => 10 ms;
	end thr_collector;

	thread implementation thr_collector.i
	end thr_collector.i;

	process pr_stats
		features
			sensor1in: in data port dummy;
			sensor2in: in data port dummy;
	end pr_stats;

	process implementation pr_stats.i
		subcomponents
			process1: thread thr_filter.i;
			process2: thread thr_collector.i;
		connections
			c0: port process1.filteredout -> process2.filteredin;
			c1: port sensor1in -> process1.sensor1inval;
			c2: port sensor2in -> process1.sensor2inval;
	end pr_stats.i;

	memory segment
		properties
			ARINC653::Memory_Type => (Data_Memory, Code_Memory);
			Byte_Count => 1000;
	end segment;

	memory implementation segment.i
	end segment.i;

	memory ram
	end ram;

	memory implementation ram.i
		subcomponents
			segment1: memory segment.i;
			segment2: memory segment.i;
	end ram.i;

	virtual processor partition
	end partition;

	virtual processor implementation partition.i
	end partition.i;

	processor arinc_module
	end arinc_module;

	processor implementation arinc_module.two_partitions
		subcomponents
			runtime1: virtual processor partition.i {ARINC653::DAL => LEVEL_B;
						ARINC653::Partition_Identifier => 1;
						ARINC653::Partition_Name => "runtime a";
					};
			runtime2: virtual processor partition.i {ARINC653::DAL => LEVEL_A;
						ARINC653::Partition_Identifier => 2;
						ARINC653::Partition_Name => "runtime b";
					};
		properties
			ARINC653::Module_Schedule => ([Partition => reference (runtime1);
							Duration => 10 ms;
							Periodic_Processing_Start => false;],
						[Partition => reference (runtime2);
							Duration => 20 ms;
							Periodic_Processing_Start => false;]
					);
			ARINC653::Module_Major_Frame => 30 ms;
			ARINC653::HM_Error_ID_Levels => ([ErrorIdentifier => 1;
							Description => "Module Config Error";
							ErrorLevel => Module_Level;
							ErrorCode => Module_Config;
						],
						[ErrorIdentifier => 2;
							Description => "Module Initialization Error";
							ErrorLevel => Module_Level;
							ErrorCode => Module_Init;
						],
						[ErrorIdentifier => 3;
							Description => "Module Scheduling Error";
							ErrorLevel => Module_Level;
							ErrorCode => Module_Scheduling;
						]);
			ARINC653::HM_Error_ID_Actions => (
						[ErrorIdentifier => 1;
							Description => "Ignore the error";
							Action => "ignore";
						],
						[ErrorIdentifier => 2;
							Description => "Reset the Module";
							Action => "reset";
						],
						[ErrorIdentifier => 3;
							Description => "Reset the Module";
							Action => "reset";
						]
					);
	end arinc_module.two_partitions;

	system arinc653_system
	end arinc653_system;

	system implementation arinc653_system.i
		subcomponents
			module: processor arinc_module.two_partitions;
			ram: memory ram.i;
			data_acquisition: process pr_data_acq.i;
			statistics: process pr_stats.i;
		connections
			c0: port data_acquisition.sensor1out -> statistics.sensor1in;
			c1: port data_acquisition.sensor2out -> statistics.sensor2in;
		properties
			Actual_Processor_Binding => (reference (module.runtime1)) applies to statistics;
			Actual_Memory_Binding => (reference (ram.segment1)) applies to statistics;
			Actual_Processor_Binding => (reference (module.runtime2)) applies to data_acquisition;
			Actual_Memory_Binding => (reference (ram.segment2)) applies to data_acquisition;
	end arinc653_system.i;

end arinc_sample;