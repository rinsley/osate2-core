--
--  The sense actuate example consists in two processes
--  running on separate processors that exchange data through
--  a shared buses.
--
--  The following example can be used with the following
--  plugins:
--           * Latency
--			 * Resources Budgets
--			 * Resources Allocation
--           * Weight
--			 * Reliability Block Diagram
--           * Functional Hazard Assessment
--
--  For more information about our examples, please visit
--  our wiki: https://wiki.sei.cmu.edu/aadl/index.php/Models_examples
--
--  Copyright Carnegie Mellon Software Engineering Institute, 2014
--

package sense_actuate

public

with errorlibrary;
with base_types;
with sei;
with emv2;

data sensing_value extends base_types::integer_16
end sensing_value;

data implementation sensing_value.i
end sensing_value.i;


data command extends base_types::boolean
end command;

data implementation command.i
end command.i;

--
--  Hardware Part
--

processor mycpu
features
	eth0 : requires bus access ethernet;
	eth1 : requires bus access ethernet;
properties
	sei::mipscapacity => 1000.0 mips;
	
end mycpu;

memory ram
properties
	sei::ramcapacity => 1000.0 mbyte;
end ram;

bus ethernet
properties
	latency => 1 Ms .. 1 Ms;
	sei::bandwidthcapacity => 100.0 mbytesps; 
	transmission_time => [ fixed => 10 ms .. 30ms;
                           perbyte => 1 us .. 10 us; ];
end ethernet;


--
--  The sensor part. It can be a temperature sensor
--  for example,
--

device sensor
features
	sensing_val : out data port sensing_value;
	eth         : requires bus access ethernet;
flows
	f0 : flow source sensing_val;
properties
	sei::netweight => 1.2 kg;
annex EMV2 {**
	use types ErrorLibrary;
	use behavior sense_actuate::simple;
    
    error propagations 
    	sensing_val: out propagation  {valueerror,serviceomission};
    flows  	
		ef0 : error source sensing_val {valueerror,serviceomission};
	end propagations;
	
	properties
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "Bad Values";
				phases => ("all");
				severity => ARP4761::Hazardous;
				likelihood => ARP4761::Remote;
				description => "Bad Value sent by the producer";
				comment => "Not so important if the next data is correct";
					])
			applies to sensing_val.valueerror;
		emv2::hazards => 
			([	crossreference => "N/A";
				failure => "No Value at all";
				phases => ("all");
				severity => ARP4761::Hazardous;
				likelihood => ARP4761::Remote;
				description => "No Service from the sensor";
				comment => "Must eventually come back to regular service";
					])
			applies to sensing_val.valueerror;
		emv2::occurrencedistribution => [ probabilityvalue => 0.5 ; Distribution => Fixed;] applies to failed;
**};
end sensor;

device implementation sensor.i
end sensor.i;

--
--  Processing the data from the sensor in order
--  to command the actuator. For example, it
--  can be a heater control system that will
--  receive the temperature and command the heater. 
--

process processing_data
features
	sensing_value : in data port sensing_value.i;
	command_value : out data port command.i;
flows
	f0 : flow path sensing_value -> command_value;
annex EMV2 {**
	use types ErrorLibrary;
    use behavior sense_actuate::simple;
    error propagations 
    	sensing_value: in propagation  	{valueerror,serviceomission};
    	command_value: out propagation  {serviceomission};
    flows  	
		ef0 : error path sensing_value {valueerror} -> command_value{serviceomission};
		ef1 : error path sensing_value {serviceomission} -> command_value{serviceomission};
	end propagations;
	
	properties
		emv2::occurrencedistribution => [ probabilityvalue => 0.1 ; Distribution => Fixed;] applies to failed;
**};
end processing_data;

process implementation processing_data.i
properties
	sei::rambudget => 100.0 mbyte;
end processing_data.i;



--
--  Actuator. It can be a heater for example.
--  The actuator receives a command value
--  produced by the data processing part.
--

device actuator
features
	command_val : in data port command;
	eth         : requires bus access ethernet;
flows
	f0 : flow sink command_val;
properties
	sei::netweight => 1.5 kg;
annex EMV2 {**
	use types ErrorLibrary;
    use behavior sense_actuate::simple;
    
    error propagations 
    	command_val: in propagation  {serviceomission};
    flows  	
		ef0 : error sink command_val {serviceomission};
	end propagations;
	
	
	properties
		emv2::occurrencedistribution => [ probabilityvalue => 0.3 ; Distribution => Fixed;] applies to failed;
**};
end actuator;

device implementation actuator.i
end actuator.i;

--
--  main assembly
--

system sense_actuate_example
end sense_actuate_example;

system implementation sense_actuate_example.i
subcomponents
	cpu 			: processor mycpu;
	ram 			: memory ram;
	sensor 			: device sensor.i;
	processing 		: process processing_data.i;
	actuate			: device actuator.i;
	eth0       	 	: bus ethernet;
	eth1       	 	: bus ethernet;
connections
	c0 : port sensor.sensing_val -> processing.sensing_value
		{actual_connection_binding => (reference (eth0));};
	c1 : port processing.command_value -> actuate.command_val
		{actual_connection_binding => (reference (eth1));};
	b0 : bus access eth0 <-> sensor.eth;
	b1 : bus access eth0 <-> cpu.eth0;
	b2 : bus access eth1 <-> actuate.eth;
	b3 : bus access eth1 <-> cpu.eth1;
flows
	f0 : end to end flow sensor.f0 -> c0 -> processing.f0 -> c1 -> actuate.f0
	 	{Latency => 20ms .. 50 ms;};
properties
	actual_processor_binding => (reference (cpu)) applies to processing;
	actual_memory_binding    => (reference (ram)) applies to processing;
	sei::weightlimit 		 => 10.0 kg;
annex EMV2 {**
	use types ErrorLibrary;
    use behavior sense_actuate::simple;

	composite error behavior
	states
		[sensor.failed and processing.failed and actuate.failed]-> failed;
	end composite;    
**};
end sense_actuate_example.i;


annex EMV2 {**
	error behavior simple
	states
		operational : initial state ;
		failed : state ;
	end behavior ;
**};
end sense_actuate;
